name: Publish to npm

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use package.json version)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write # For npm provenance

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update version (if specified)
        if: ${{ github.event.inputs.version }}
        run: pnpm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Run validation
        run: pnpm run validate

      - name: Run tests
        run: pnpm test

      - name: Run quality checks
        run: pnpm run quality

      - name: Build package
        run: pnpm run build

      - name: Check package contents
        run: pnpm pack --dry-run

      - name: Publish to npm
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get package info
        id: package-info
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub release (if from workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-info.outputs.version }}
          release_name: Release v${{ steps.package-info.outputs.version }}
          body: |
            ## Release v${{ steps.package-info.outputs.version }}
            
            Published ${{ steps.package-info.outputs.name }}@${{ steps.package-info.outputs.version }} to npm.
            
            Install with:
            ```bash
            npm install ${{ steps.package-info.outputs.name }}@${{ steps.package-info.outputs.version }}
            ```
            
            Auto-generated by GitHub Actions ðŸ¤–
          draft: false
          prerelease: false

      - name: Comment on PR (if applicable)
        if: ${{ github.event_name == 'release' && github.event.release.body }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `ðŸ“¦ Published ${{ steps.package-info.outputs.name }}@${{ steps.package-info.outputs.version }} to npm!\n\n[View on npm](https://www.npmjs.com/package/${{ steps.package-info.outputs.name }})`
            })